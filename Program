from sqlalchemy import create_engine
from sqlalchemy import desc, asc
import sys

engine = create_engine('sqlite:///todo.db?check_same_thread=False')

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Date
from datetime import datetime, timedelta

Base = declarative_base()

class Table(Base):
    __tablename__ = 'task'
    id = Column(Integer, primary_key=True)
    task = Column(String, default='default_value')
    deadline = Column(Date, default=datetime.today())

    def __repr__(self):
        return self.task

Base.metadata.create_all(engine)

from sqlalchemy.orm import sessionmaker

Session = sessionmaker(bind=engine)
session = Session()

rows = session.query(Table).all()

today = datetime.today().date()
tomorrow = today + timedelta(days=1)
week_day = today.isocalendar()[2]
if week_day == 7:
    week_day = 0
    start_date = today
start_date=today - timedelta(days=week_day)


def day(day_of_week):
    if day_of_week == 0:
        return "Sunday"
    if day_of_week == 1:
        return "Monday"
    if day_of_week == 2:
        return "Tuesday"
    if day_of_week == 3:
        return "Wednesday"
    if day_of_week == 4:
        return "Thursday"
    if day_of_week == 5:
        return "Friday"
    if day_of_week == 6:
        return "Saturday"
    if day_of_week == 7:
        return "Sunday"

for _ in range(100):
    print("1) Today's tasks")
    print("2) Week's tasks")
    print("3) All tasks")
    print("4) Missed Tasks")
    print("5) Add task")
    print("6) Delete task")
    print("0) Exit")



    x = input()

    if x == '0':
        print("Bye!")
        sys.exit(0)


    elif x == '1':
        if rows:
            p = 1
            for row in rows:
                if row.deadline == today:
                    row = str(row)
                    print("{} {} {}:".format("Today",
                                             today.day,
                                             today.strftime('%b')))
                    print("{}. {}".format(p, row))
                    p += 1

            if p == 1:
                print('Nothing to do!')
        else:
            print("Nothing to do!")
        print("")

    elif x == '2':

        for i in range(7):
            print("{} {} {}:".format(day((today + timedelta(days=i)).weekday() + 1),

                                     ((today + timedelta(days=i)).day),

                                     (today + timedelta(days=i)).strftime('%b')))

            z = 0

            for row in rows:

                if today + timedelta(days=i) == row.deadline:
                    print("{}. {}".format(z + 1, row.task))

                    z += 1

            if z == 0:
                print("Nothing to do!")

            print("")

    elif x == '3':
        if rows:
            rows = session.query(Table).order_by(asc(Table.deadline)).all()
            p3 = 1
            for row in rows:
                print("{}. {}. {} {}".format(p3, row.task, row.deadline.day, row.deadline.strftime('%b')))
                p3 += 1
            print("")
        else:
            print("Nothing to do!")
        print("")

    elif x == '4':
        p3 = 1
        printed = 0
        for row in rows:
            if row.deadline < today:
                print("{}. {}. {} {}".format(p3, row.task, row.deadline.day, row.deadline.strftime('%b')))
                p3 += 1
                printed = 1
            if printed != 1:
                print("Nothing is missed!")
        print("")


    elif x == '5':
        new_row = Table(task=input("Enter task\n"), deadline=datetime.strptime(input("Enter deadline\n"), '%Y-%m-%d'))
        session.add(new_row)
        session.commit()
        rows = session.query(Table).all()
        print('The task has been added!')
        print("")

    elif x == '6':
        rows = session.query(Table).order_by(asc(Table.deadline)).all()
        p3 = 1
        print("Choose the number of the task you want to delete:")
        for row in rows:
            print("{}. {}. {} {}".format(p3, row.task, row.deadline.day, row.deadline.strftime('%b')))
            p3 += 1

        x = int(input())
        p4 = 1
        for row in rows:
            if x == p4:
                session.delete(row)
                session.commit()
                break
            else:
                p4 += 1
        print("")
